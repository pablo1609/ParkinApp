// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkinApp.Persistence.Data;

#nullable disable

namespace ParkinApp.Persistence.Migrations
{
    [DbContext(typeof(ParkingDbContext))]
    partial class ParkingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ParkingApp.Entities.ParkingSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReservationEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReservationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpotTimeZoneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserTimeZoneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("ParkingSpots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsReserved = false,
                            SpotTimeZoneId = "Europe/Warsaw",
                            UserTimeZoneId = "Europe/Warsaw"
                        },
                        new
                        {
                            Id = 2,
                            IsReserved = false,
                            SpotTimeZoneId = "Europe/Warsaw",
                            UserTimeZoneId = "Europe/Warsaw"
                        },
                        new
                        {
                            Id = 3,
                            IsReserved = false,
                            SpotTimeZoneId = "Europe/Warsaw",
                            UserTimeZoneId = "Europe/Warsaw"
                        },
                        new
                        {
                            Id = 4,
                            IsReserved = false,
                            SpotTimeZoneId = "Europe/Warsaw",
                            UserTimeZoneId = "Europe/Warsaw"
                        },
                        new
                        {
                            Id = 5,
                            IsReserved = false,
                            SpotTimeZoneId = "Europe/Warsaw",
                            UserTimeZoneId = "Europe/Warsaw"
                        },
                        new
                        {
                            Id = 6,
                            IsReserved = false,
                            SpotTimeZoneId = "Europe/Warsaw",
                            UserTimeZoneId = "Europe/Warsaw"
                        },
                        new
                        {
                            Id = 7,
                            IsReserved = false,
                            SpotTimeZoneId = "Europe/Warsaw",
                            UserTimeZoneId = "Europe/Warsaw"
                        },
                        new
                        {
                            Id = 8,
                            IsReserved = false,
                            SpotTimeZoneId = "Europe/Warsaw",
                            UserTimeZoneId = "Europe/Warsaw"
                        },
                        new
                        {
                            Id = 9,
                            IsReserved = false,
                            SpotTimeZoneId = "Europe/Warsaw",
                            UserTimeZoneId = "Europe/Warsaw"
                        },
                        new
                        {
                            Id = 10,
                            IsReserved = false,
                            SpotTimeZoneId = "Europe/Warsaw",
                            UserTimeZoneId = "Europe/Warsaw"
                        });
                });

            modelBuilder.Entity("ParkingApp.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ReservedSpotId")
                        .HasColumnType("int");

                    b.Property<string>("UserTimeZoneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ParkingApp.Entities.ParkingSpot", b =>
                {
                    b.HasOne("ParkingApp.Entities.User", "User")
                        .WithOne("ReservedSpot")
                        .HasForeignKey("ParkingApp.Entities.ParkingSpot", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParkingApp.Entities.User", b =>
                {
                    b.Navigation("ReservedSpot")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
